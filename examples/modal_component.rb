# frozen_string_literal: true

require_relative "../lib/tailmix"

class ModalComponent
  include Tailmix
  attr_reader :ui

  tailmix do
    element :base, "fixed inset-0 z-50 flex items-center justify-center" do
      dimension :open, default: true do
        variant true, "visible opacity-100"
        variant false, "invisible opacity-0"
      end
      stimulus.controller("modal").action_payload(:toggle, as: :toggle_data)
    end

    element :overlay, "fixed inset-0 bg-black/50 transition-opacity" do
      stimulus.context("modal").action(:click, :close)
    end

    element :panel, "relative bg-white rounded-lg shadow-xl transition-transform transform" do
      dimension :size, default: :md do
        variant :sm, "w-full max-w-sm p-4" do
          classes "dark:text-slate-400", group: :dark_mode
          classes "one two"
        end
        variant :md, "w-full max-w-md p-6"
        variant :lg, "w-full max-w-lg p-8"
      end
      stimulus.context("modal").target("panel")
    end

    element :title, "text-lg font-semibold text-gray-900"
    element :body, "mt-2 text-sm text-gray-600"
    element :close_button, "absolute top-2 right-2 p-1 text-gray-400 rounded-full hover:bg-gray-100 hover:text-gray-600" do
      stimulus.context("modal").action(:click, :close)
    end

    element :footer, "mt-4 pt-4 border-t flex justify-end"
    element :confirm_button, "relative inline-flex items-center px-4 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700" do
      stimulus.controller("form-submission")
              .action(:click, :submit)
              .action_payload(:enter_pending_state, as: :pending_data)
    end

    element :spinner, "absolute inset-0 flex items-center justify-center hidden"

    action :toggle, method: :toggle do
      element :overlay do
        classes "hidden"
      end
      element :panel do
        classes "hidden"
      end
    end

    action :lock, method: :add do
      element :close_button do
        classes "hidden"
      end
      element :panel do
        data locked: true, reason: "processing"
      end
    end

    action :enter_pending_state, method: :add do
      element :confirm_button do
        classes "opacity-75 cursor-not-allowed"
      end
      element :spinner do
        classes "flex"
      end
    end
  end

  def initialize(size: :md, open: false)
    @ui = tailmix(size: size, open: open)
  end

  def lock!
    @ui.action(:lock).apply!
  end
end

puts "-" * 100
# puts ModalComponent.dev.docs
# puts ""
# puts "Scaffolds:"
# puts ""
# puts ModalComponent.dev.stimulus.scaffold
# puts ""

# >>>
#
# == Tailmix Docs for ModalComponent ==
# Signature: `initialize(open: true, size: :md)`
#
# Dimensions:
#   - open (default: true)
#     - true:
#       - classes : "visible opacity-100"
#     - false:
#       - classes : "invisible opacity-0"
#   - size (default: :md)
#     - :sm:
#       - classes : "w-full max-w-sm p-4"
#       - classes (group: :dark_mode): "dark:text-slate-400"
#       - classes : "one two"
#     - :md:
#       - classes : "w-full max-w-md p-6"
#     - :lg:
#       - classes : "w-full max-w-lg p-8"
#
# Actions:
#   - :toggle
#   - :lock
#   - :enter_pending_state
#
# Stimulus:
#   - on `modal` controller:
#     - Targets: panel
#     - Actions: close
#
# Stimulus:
#   - on `form-submission` controller:
#     - Actions: submit
#
# Scaffolds:
#
# // Generated by Tailmix for the "modal" controller
# // Path: app/javascript/controllers/modal_controller.js
# import { Controller } from "@hotwired/stimulus"
# import Tailmix from "tailmix"
#
# export default class extends Controller {
#   static targets = ['panel']
#   static values = { toggleData: Object }
#
#   connect() {
#     console.log("modal controller connected to", this.element);
#   }
#   toggle(event) {
#      if (event) event.preventDefault();
#      Tailmix.run({ config: this.toggleDataValue, controller: this });
#   }
#
#   close() {
#     console.log('modal#close fired');
#   }
# }
# ------------------------------------------------------------
#
# // Generated by Tailmix for the "form-submission" controller
# // Path: app/javascript/controllers/form-submission_controller.js
# import { Controller } from "@hotwired/stimulus"
# import Tailmix from "tailmix"
#
# export default class extends Controller {
#   static targets = []
#   static values = { pendingData: Object }
#
#   connect() {
#     console.log("form-submission controller connected to", this.element);
#   }
#   enterPendingState(event) {
#      if (event) event.preventDefault();
#      Tailmix.run({ config: this.pendingDataValue, controller: this });
#   }
#
#   submit() {
#     console.log('form-submission#submit fired');
#   }
# }
# ------------------------------------------------------------




modal = ModalComponent.new(size: :lg, open: true)
# modal.lock!
ui = modal.ui


def stringify_keys(obj)
  case obj
  when Hash
    obj.transform_keys(&:to_s).transform_values { |v| stringify_keys(v) }
  when Array
    obj.map { |v| stringify_keys(v) }
  else
    obj
  end
end

# puts "Definition:"
# puts JSON.pretty_generate(stringify_keys(ModalComponent.tailmix_definition.to_h))
# ui.action(:lock).apply!

ModalComponent.dev.elements.each do |element_name|
  element = ui.send(element_name)
  puts element_name
  element.each_attribute do |attribute|
    attribute.each do |key, value|
      puts "    #{key} :-> #{value}"
    end
    puts ""
  end
end
