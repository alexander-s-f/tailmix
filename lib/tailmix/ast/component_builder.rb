# frozen_string_literal: true

module Tailmix
  module AST
    class ComponentBuilder
      attr_reader :root_node

      def initialize(component_name)
        @root_node = Root.new(name: component_name, states: [], actions: [], elements: [], plugins: [])
      end

      def state(name, **options)
        @root_node.states << State.new(name: name, options: options)
      end

      def action(name, &block)
        builder = ActionBuilder.new; builder.instance_eval(&block)
        @root_node.actions << Action.new(name: name, instructions: builder.instructions)
      end

      def element(name, base_classes = "", &block)
        builder = ElementBuilder.new(name, base_classes, self)
        builder.instance_eval(&block) if block
        @root_node.elements << builder.element_node

        # Collecting inline actions generated by `on`
        builder.element_node.rules.grep(EventHandlerRule).each do |rule|
          @root_node.actions << rule.inline_action if rule.inline_action
        end
      end

      def plugin(name, **options)
        @root_node.plugins << Plugin.new(name: name, options: options)
      end
    end
  end
end
